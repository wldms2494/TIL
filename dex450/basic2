List<List<sObject>> acmes1 = [Find 'Acme' Returning Acocount];
account object에서 'Acme'라는 회사를 찾는 SOQL문이다
출력결과 :
09:29:26:059 USER_DEBUG [2]|DEBUG|((Account:{Id=0018c000028a65oAAA, RecordTypeId=0128c000001t5loAAA, CurrencyIsoCode=USD}, Account:{Id=0018c000028a65qAAA, RecordTypeId=0128c000001t5loAAA, CurrencyIsoCode=USD}))

어카운트의 아이이디랑 레코드 타입 두가지가 보인당

List<List<sObject>> acmes1 = [Find 'Acme Returning Account, Opportunity];

출력결과 : 
09:34:51:119 USER_DEBUG [2]|DEBUG|
((Account:{Id=0018c000028a65oAAA, RecordTypeId=0128c000001t5loAAA, CurrencyIsoCode=USD}, Account:{Id=0018c000028a65qAAA, RecordTypeId=0128c000001t5loAAA, CurrencyIsoCode=USD}), 
(Opportunity:{Id=0068c00000mhlfZAAQ, RecordTypeId=0128c000001t5lmAAA, CurrencyIsoCode=USD}, Opportunity:{Id=0068c00000mhlfaAAA, RecordTypeId=0128c000001t5lmAAA, CurrencyIsoCode=USD}, Opportunity:{Id=0068c00000mhlfbAAA, RecordTypeId=0128c000001t5lmAAA, CurrencyIsoCode=USD}, Opportunity:{Id=0068c00000mhlfYAAQ, RecordTypeId=01
회원에 있던 acme 와 영업에 있던 acme가 모두 출력이 된다

일단 하나의 오브젝트에서 찾던 , 멀티 오브젝트로 찾던 List<List<sObject>> 형식으로 데이터 타입을 주면 되는것 같다 .
그리고 OR조건이 아니라 AND조건으로 검색하는듯.

List<List<sObject>>  acmes1 = [Find 'Acme' Returning Account(Name, Phone)];
Name이랑 Phone의 필드값도 요청하는 쿼리를 작성 해보았다. 

출력 결과 : 

09:38:06:064 USER_DEBUG [2]|DEBUG|
((Account:{Name=Acme Inc, Phone=1-212-555-5555, Id=0018c000028a65oAAA, RecordTypeId=0128c000001t5loAAA, CurrencyIsoCode=USD}, Account:{Name=Acme Inc (London), Phone=1-212-555-7500, Id=0018c000028a65qAAA, RecordTypeId=0128c000001t5loAAA, CurrencyIsoCode=USD}))
폰이랑 이름도 잘 출력 된다. ㅎㅎ
이것은 참고로 SOSL을 배우는 중 
SOSL은 우리가 멀티 오브젝트로 동시에 검색하는것을 하게 해준다

gook check for consideration for relationship https://help.salesforce.com/s/articleView?id=sf.relationships_considerations.htm&type=5












DEX-450 
Q.234 which two queries can a developer user in visualfoce controller to protect against SOQL injection Vunerabilities(취약점 vunerability)
(what;s the SOQL's Vunerability)
(a) String qryName = '%' + String.enforceSecurityChecks(name) + '%' 






SOQL 기본부터 해야겄다.


in OOP for admins you learned DML ! insert update delete. 
but what if you want to get data that already exists in the databased? SOQL makes it simple to retrieve data


for(data type 변수명 : 훑을 리스트 네임) {
    실행할 로직
}

### Practice
드림하우스 리얼티에서 삼십일 동안 게시 되었던 프로퍼티의 리스트를 SOQL을 통해 가져와랏
Create a Relationship Query
Use SOQL to identify properties listed with DreamHouse Realty in the last 30 days.

If you didn’t already install the DreamHouse package and import sample data, follow the instructions at the beginning of this unit to do that now.

Create a class
Name: PropertyUtility
Create a method
Name: newListedProperties
Keywords: public, static, and void
Create a list

Name: newPropList
Create a query and assign the query results to the list

List<Property__c> newPropList = [SELECT Name, Broker__r.Email, Day_On_Market__c FROM Property__c WHERE Day_On_Markcet__c<=30];

Get this information:
The name of the property
The broker’s email address
How long the property has been on market
(Hint: Use API names, not field names or field labels)
Object: Property
Condition: The property was listed within the last 30 days
Create a for loop that iterates through the query results
Object: Property
List name: newPropList
For each item, concatenate the property name, followed by a colon, followed by the broker’s email address: <Property Name> : <Broker Email>
Store the concatenated string in a variable named propEmail
Print the propEmail variable to the debug log




조건절을 둘때 변수로 지정해서 둘수 도 있다.
프로퍼티 리스트를 가져 오는데 가격이 200000이상인것만 들고온다고 해보자
List<Property__c> property = [SELECT Name, Price__c FROM Property__c WHERE Price__c<20000];

가격은 변수로 지정할 수 도 있다.
Integer maxHomeValue = 200000;
List<Property__c> property = [SELECT Name, Price__c FROM Property__c WHERE Price__c<= :maxHomeValue];


** here's the thing
look where part
the bind varible is preceded by a colon (:)
the value of the bind variable, maxHomeValue, is set outside the query. 




## Aggregate Functions

just thinks as comining.
In reports, you use roll-up summary fields to caculate values from related reocords. For example,
you might want to calculate the total number of properties, or the average or highest value of properties in a city.
In SOQL,.,/. you use aggregate functions to perform those and other calculations!

COUNT() : number of rows that are associated with the field
COUNT_DISTINCT() : number of unique rows that match query criteria 
SUM () : total value of a numeric field
AVG () : average value of a numeric field
plus MIN(), MAX()

i'm kind of counfused with SUM() and, COUNT()

for example

for count() : SELECT COUNT(Name) FROM Broker__c 
brings the total number of Name's rows

SUM()  : SELECT SUM(Price__c), Broker__r.Name FROM Property__c GROUP BY Broker__r.Name
guess it;s mix with other object with group by


## Group the Results of Aggeregate Functions

after cal based of aggregated data, when you report results in groups, as you do in summary reports.
To group values in a SOQL query, use the GROUP By clause ~! 
a customer of DreamHouse Realty wants to know which brokers have sold(closed) a property.


`
SELECT MAX(Status__c), Broker__r.Name
FROM Property__c
GROUP BY Broker__r.Name
`
i'm not 100%sure about why they use MAX() this time.
it filter highst value ? maybe? but how they compare close and available ;;???
anyway we're using aggregate Function,

they we can get result List grouped by broker

and we can get narrow result
put condition on it ! 

with 'HAVING'

SELECT MAX(Status__c), Broker__r.Name
FROM Property__c
GROUP BY Broker__r.Name
HAVING MAX(Status__c) = 'Closed'

그냥 Having Status__c 하면 안댕~

The WHERE clause is a lot like the HAVING clause, right? Here’s how to decide when to use WHERE and when to use HAVING. 

The WHERE clause filters records in a SOQL query that has no aggregate function.
The HAVING clause filters the results after data is aggregated by an aggregate function































